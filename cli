#!/bin/bash
system="linux"
compiler="gnu"
build="Debug"
target="all"
docBuild="web"

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    system="linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    system="mac"
elif [[ "$OSTYPE" == "cygwin" ]]; then
    # POSIX compatibility layer and Linux environment emulation for Windows
    system="cygwin"
elif [[ "$OSTYPE" == "msys" ]]; then
    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
    system="msys"
else
    system="windows"
fi

helperBuild() {
    cat <<EOF
CLI subcommand "build" to compile the source codes.

Usage:
The command will automatically detect your system, you just need to tell the 
cli which compiler, build type, and target you want to use

    cli build -c|--compiler -b|--build -t|--target [-h|--help]

Example:

    cli build -c intel -b Debug
    cli build -c intel -b Debug -t all
    cli build -c intel -b Debug -t clean

EOF
}

helperDoc() {
    cat <<EOF
CLI subcommand "doc" to build the documentation

Usage:
You can choose to build either the website or pdf

    cli doc -b|--build [-h|--help]

Example:

    cli doc -b web
    cli doc -b pdf

EOF
}

helperCLI() {
    cat <<EOF
Command line interface for OpenCAEPlus to make life easier.
Two subcommands available:
    
    cli build
    cli doc

Use -h or --help option to check the usage for each of the 
subcommand.

EOF
}

case "$1" in
build)
    echo "Compile the program"
    shift

    OPT=$(getopt -o t:c:b:h --long target:,compiler:,build:,help -n 'cli build' -- "$@")
    eval set -- "${OPT}"

    [ $# -le 1 ] && {
        helperBuild
    }

    while true; do
        case "$1" in
        -t | --target)
            target="$2"
            shift 2
            ;;
        -c | --compiler)
            compiler="$2"
            shift 2
            ;;
        -b | --build)
            build="$2"
            shift 2
            ;;
        -h | --help)
            helperBuild
            ;;
        --)
            echo "Using all default variables ${system}-${compiler}-${build}-${target}"
            break
            ;;
        *)
            echo "Unknown options!"
            helperBuild
            ;;
        esac
    done

    if [[ ${compiler} = "intel" ]]; then
        source /opt/intel/oneapi/setvars.sh
        if [[ ${system} = "mac" ]]; then
            export CC=icc
            export CXX=icpc
        fi
    fi

    echo ${system}-${compiler}-${build}-${target}

    case "$system" in
    "linux")
        cmake --preset="${system}-${compiler}-${build}" -S "."
        cmake --build --preset="${system}-${compiler}-${build}" --target ${target}
        ;;
    "mac")
        cmake --preset="${system}-${compiler}-${build}" -S "."
        cmake --build --preset="${system}-${compiler}-${build}" --target ${target}
        ;;
    "windows")
        echo "Please use the cli.bat script on windows "
        ;;
    --)
        break
        ;;
    *)
        echo "System $system not supported"
        helperBuild
        ;;
    esac

    ;;

doc)
    echo "Build the doc"
    shift

    OPT=$(getopt -o hb: --long help,build: -n 'cli doc' -- "$@")
    eval set -- "${OPT}"

    [ $# -le 1 ] && {
        helperDoc
    }

    while true; do
        case "$1" in
        -b | --build)
            docBuild=$2
            shift 2
            ;;
        -h | --help)
            helperDoc
            ;;
        --)
            break
            ;;
        *)
            echo "Unknown options!"
            helperDoc
            ;;
        esac
    done

    cd docs
    make $docBuild
    cd -
    ;;

-h | --help)
    helperCLI
    shift
    ;;
--)
    break
    ;;
*)
    helperCLI
    shift
    ;;

esac
